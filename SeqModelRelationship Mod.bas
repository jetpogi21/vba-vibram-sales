Attribute VB_Name = "SeqModelRelationship Mod"
Option Compare Database
Option Explicit

Public Function SeqModelRelationshipCreate(frm As Object, FormTypeID)

    Select Case FormTypeID
        Case 4: ''Data Entry Form
        Case 5: ''Datasheet Form
        Case 6: ''Main Form
        Case 7: ''Tabular Report
    End Select

End Function

Public Function RelationshipAlias_AfterUpdate(frm As Form)

    Dim RelationshipAlias: RelationshipAlias = frm("RelationshipAlias")
    
    If isFalse(RelationshipAlias) Then Exit Function
    
    Dim PluralizedRelationshipAlias: PluralizedRelationshipAlias = PluralizeWord(RelationshipAlias)
    Dim VerboseRelationshipName: VerboseRelationshipName = ConvertToVerboseCaption(RelationshipAlias)
    Dim PluralizedVerboseRelationshipName: PluralizedVerboseRelationshipName = PluralizeWord(ConvertToVerboseCaption(RelationshipAlias))
    
    frm("PluralizedVerboseRelationshipName") = PluralizedVerboseRelationshipName
    frm("PluralizedRelationshipAlias") = PluralizedRelationshipAlias
    frm("VerboseRelationshipName") = VerboseRelationshipName
    
End Function

Public Function GetLeftPluralizedModelName(PluralizedModelName, PluralizedModelName2, RelationshipAlias)
    
    If Not IsNull(RelationshipAlias) Then
        GetLeftPluralizedModelName = RelationshipAlias
        Exit Function
    End If
    
    If Not IsNull(PluralizedModelName2) Then
        GetLeftPluralizedModelName = PluralizedModelName2
        Exit Function
    End If
    
    GetLeftPluralizedModelName = PluralizedModelName
    
End Function

Public Function GenerateModelRelationship(frm As Object, Optional SeqModelRelationshipID = Null)
    
    Dim ReturnMode As Boolean: ReturnMode = True
    If IsNull(SeqModelRelationshipID) Then
        ReturnMode = False
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
    End If
    
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    
    ''Hero.belongsTo(BelongsTo, { foreignKey: "belongsToId" }); --> 1:1
    Dim Relationship: Relationship = rs.fields("Relationship")
    Dim RightModelName: RightModelName = rs.fields("RightModelName")
    Dim LeftModelName: LeftModelName = rs.fields("LeftModelName")
    Dim RightForeignKey: RightForeignKey = rs.fields("RightForeignKey")
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey")
    Dim ThroughModelName: ThroughModelName = rs.fields("ThroughModelName")
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    
    Dim lines As New clsArray
    Dim dict As New clsDictionary
    Select Case Relationship
        Case "1:1":
            Set dict = New clsDictionary
            dict.Add "foreignKey", Esc(RightForeignKey)
            lines.Add RightModelName & ".belongsTo(" & LeftModelName & ", " & dict.ToFormatString & ");"
            lines.Add LeftModelName & ".hasOne(" & RightModelName & ", " & dict.ToFormatString & ");"
        Case "1:M":
            Dim mode: mode = "CASCADE"
            Dim AllowNull: AllowNull = isPresent("tblSeqModelFields", "SeqModelID = " & LeftModelID & " AND DatabaseFieldName = " & Esc(LeftForeignKey) & " AND AllowNull")
            If AllowNull Then mode = "SET NULL"
            
            Set dict = New clsDictionary
            dict.Add "foreignKey", Esc(LeftForeignKey)
            dict.Add "onDelete", Esc(mode)
            dict.Add "onUpdate", Esc("CASCADE")
            ''Hero.hasMany(HeroSkill, { foreignKey: "heroId" });
            lines.Add RightModelName & ".hasMany(" & LeftModelName & ", " & dict.ToFormatString & ");"
            ''HeroSkill.belongsTo(Hero, { foreignKey: "heroId" });
            lines.Add LeftModelName & ".belongsTo(" & RightModelName & ", " & dict.ToFormatString & ");"
        Case "M:M":
            ''CardKeyword.belongsToMany(Card, {through: CardCardKeyword,foreignKey: "cardKeywordId",});
            Set dict = New clsDictionary
            dict.Add "foreignKey", Esc(RightForeignKey)
            dict.Add "through", ThroughModelName
            lines.Add RightModelName & ".belongsToMany(" & LeftModelName & ", " & dict.ToFormatString & ")"
            lines.Add ""
            Set dict = New clsDictionary
            dict.Add "foreignKey", Esc(LeftForeignKey)
            dict.Add "through", ThroughModelName
            
            lines.Add LeftModelName & ".belongsToMany(" & RightModelName & ", " & dict.ToFormatString & ")"
            
    End Select
    
    Dim ModelRelationship: ModelRelationship = lines.JoinArr(vbCrLf)
    
    If ReturnMode Then
        GenerateModelRelationship = ModelRelationship
        Set lines = New clsArray
        lines.Add "//Generated by GenerateModelRelationship"
        lines.Add GenerateModelRelationship
        GenerateModelRelationship = lines.NewLineJoin
    Else
        CopyToClipboard ModelRelationship
    End If
    
End Function

Public Function GenerateFormControlFromRelationship(frm As Object, Optional SeqModelRelationshipID = "")
    
    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If
    
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim ListName As String: ListName = rs.fields("ListName"): If ExitIfTrue(isFalse(ListName), "ListName is empty..") Then Exit Function
    Dim LeftPluralizedModelName: LeftPluralizedModelName = rs.fields("LeftPluralizedModelName"): If ExitIfTrue(isFalse(LeftPluralizedModelName), "LeftPluralizedModelName is empty..") Then Exit Function
    Dim Caption: Caption = ConvertToVerboseCaption(ListName)
    ''List, Caption, FieldName
    ''Form Control Autocomplete Multiple
    Dim TemplateContent: TemplateContent = GetTemplateContent("Form Control Autocomplete Multiple")
    
    Dim replacedContent
    replacedContent = replace(TemplateContent, "[List]", ListName)
    replacedContent = replace(replacedContent, "[Caption]", Caption)
    replacedContent = replace(replacedContent, "[FieldName]", LeftPluralizedModelName)
    
    GenerateFormControlFromRelationship = replacedContent
    
    Dim lines As New clsArray
    lines.Add "//Generated by GenerateFormControlFromRelationship"
    lines.Add GenerateFormControlFromRelationship
    GenerateFormControlFromRelationship = lines.NewLineJoin
    
    CopyToClipboard GenerateFormControlFromRelationship
    
End Function

Public Function GenerateFieldArrayComponent(frm As Object, Optional SeqModelRelationshipID = "")
    
    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If
    
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftPluralizedModelName: LeftPluralizedModelName = rs.fields("LeftPluralizedModelName"): If ExitIfTrue(isFalse(LeftPluralizedModelName), "LeftPluralizedModelName is empty..") Then Exit Function
    Dim LeftModelName: LeftModelName = rs.fields("LeftModelName"): If ExitIfTrue(isFalse(LeftModelName), "LeftModelName is empty..") Then Exit Function
    Dim RightVariableName: RightVariableName = rs.fields("RightVariableName"): If ExitIfTrue(isFalse(RightVariableName), "RightVariableName is empty..") Then Exit Function
    
    Dim TemplateContent: TemplateContent = GetTemplateContent("FieldArray Component")
    
    Dim replacedContent
    replacedContent = replace(TemplateContent, "[LeftPluralizedModelName]", LeftPluralizedModelName)
    replacedContent = replace(replacedContent, "[RightVariableName]", RightVariableName)
    replacedContent = replace(replacedContent, "[LeftModelName]", LeftModelName)
    
    GenerateFieldArrayComponent = replacedContent
    CopyToClipboard GenerateFieldArrayComponent
    
End Function

Public Function GenerateFieldArrayFormFromRelationship(frm As Object, Optional SeqModelRelationshipID = "")
    
    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If
    
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftPluralizedModelName: LeftPluralizedModelName = rs.fields("LeftPluralizedModelName"): If ExitIfTrue(isFalse(LeftPluralizedModelName), "LeftPluralizedModelName is empty..") Then Exit Function
    Dim LeftModelName: LeftModelName = rs.fields("LeftModelName"): If ExitIfTrue(isFalse(LeftModelName), "LeftModelName is empty..") Then Exit Function
    Dim RightVariableName: RightVariableName = rs.fields("RightVariableName"): If ExitIfTrue(isFalse(RightVariableName), "RightVariableName is empty..") Then Exit Function
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    Dim RightModelName: RightModelName = rs.fields("RightModelName"): If ExitIfTrue(isFalse(RightModelName), "RightModelName is empty..") Then Exit Function
    Dim RightModelID: RightModelID = rs.fields("RightModelID"): If ExitIfTrue(isFalse(RightModelID), "RightModelID is empty..") Then Exit Function
    Dim BackendProjectID: BackendProjectID = rs.fields("BackendProjectID"): If ExitIfTrue(isFalse(BackendProjectID), "BackendProjectID is empty..") Then Exit Function
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey"): If ExitIfTrue(isFalse(LeftForeignKey), "LeftForeignKey is empty..") Then Exit Function
    
    Dim TemplateContent: TemplateContent = GetTemplateContent("FieldArray Form")
    
    Dim TableHead: TableHead = GenerateFormikArrayTableHead(frm, LeftModelID, LeftForeignKey)
    Dim TableBody: TableBody = GenerateFormikArrayControls(frm, LeftModelID, LeftForeignKey)
    Dim handleAddRowButtonClick: handleAddRowButtonClick = Generate_handleAddRowButtonClick(frm, LeftModelID, RightModelID)
    Dim replacedContent
    replacedContent = replace(TemplateContent, "[ModelName]", LeftModelName)
    replacedContent = replace(replacedContent, "[PluralizedModelName]", LeftPluralizedModelName)
    replacedContent = replace(replacedContent, "[TableHead]", TableHead)
    replacedContent = replace(replacedContent, "[TableBody]", TableBody)
    replacedContent = replace(replacedContent, "[ParentModelName]", RightModelName)
    replacedContent = replace(replacedContent, "[ParentVariableName]", RightVariableName)
    replacedContent = replace(replacedContent, "[handleAddRowButtonClick]", handleAddRowButtonClick)
    replacedContent = replace(replacedContent, "[FormikArrayTotalComputation]", GetFormikArrayTotalComputation(frm, LeftModelID, LeftForeignKey))
    replacedContent = replace(replacedContent, "[TableFooter]", GetFormikArrayTableFooterForTotal(frm, LeftModelID, LeftForeignKey))
    
    ''GetFormikArrayTableFooterForTotal

    GenerateFieldArrayFormFromRelationship = replacedContent
    GenerateFieldArrayFormFromRelationship = GetGeneratedByFunctionSnippet(GenerateFieldArrayFormFromRelationship, "GenerateFieldArrayFormFromRelationship")
    
    CopyToClipboard GenerateFieldArrayFormFromRelationship
    
    Dim ClientPath: ClientPath = ELookup("tblBackendProjects", "BackendProjectID = " & BackendProjectID, "ClientPath")
    If ExitIfTrue(isFalse(ClientPath), "ClientPath is empty..") Then Exit Function
    
    Dim filePath: filePath = ClientPath & "src\components\" & RightVariableName & "\" & LeftModelName & "Form.tsx"
    
    WriteToFile filePath, GenerateFieldArrayFormFromRelationship, RightModelID
    
End Function

Public Function PushAtLeastOneRow(frm As Object, Optional SeqModelRelationshipID = "")
    
    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If
    
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftPluralizedModelName: LeftPluralizedModelName = rs.fields("LeftPluralizedModelName"): If ExitIfTrue(isFalse(LeftPluralizedModelName), "LeftPluralizedModelName is empty..") Then Exit Function
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey"): If ExitIfTrue(isFalse(LeftForeignKey), "LeftForeignKey is empty..") Then Exit Function
    Dim RightVariableName: RightVariableName = rs.fields("RightVariableName"): If ExitIfTrue(isFalse(RightVariableName), "RightVariableName is empty..") Then Exit Function
    
    Dim fields As New clsArray
    sqlStr = "SELECT * FROM qrySeqModelFields WHERE SeqModelID = " & LeftModelID & " ORDER BY FieldOrder"
    Set rs = ReturnRecordset(sqlStr)
    Do Until rs.EOF
        Dim fieldName: fieldName = rs.fields("FieldName"): If ExitIfTrue(isFalse(fieldName), "FieldName is empty..") Then Exit Function
        If fieldName = LeftForeignKey Then
            fields.Add fieldName & ": " & RightVariableName & " ? " & RightVariableName & ".id.toString() : """""
        Else
            Dim DataType: DataType = rs.fields("DataType"): If ExitIfTrue(isFalse(DataType), "DataType is empty..") Then Exit Function
            Dim DataTypeOption: DataTypeOption = rs.fields("DataTypeOption")
            Dim AllowNull: AllowNull = rs.fields("AllowNull")
            Dim AllowedOptions: AllowedOptions = rs.fields("AllowedOptions")
            Dim options As New clsArray
            
            'sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE LeftModelID = " & SeqModelID & " AND LeftForeignKey = " & Esc(fieldName)
            Dim rs2 As Recordset: Set rs2 = ReturnRecordset(sqlStr)
        
            If DataType = "ENUM" Then
                If ExitIfTrue(isFalse(DataTypeOption), "DataTypeOption is empty..") Then Exit Function
                Set options = ConvertEnumToArray(DataTypeOption)
                fields.Add fieldName & ": " & IIf(AllowNull, """""", options.arr(0))
            ElseIf DataType = "DECIMAL" Then
                fields.Add fieldName & ": " & IIf(AllowNull, """""", """0.00""")
            ElseIf Not IsNull(AllowedOptions) Then
                options.arr = AllowedOptions
                fields.Add fieldName & ": " & Esc(options.arr(0))
'            ElseIf Not rs2.EOF Then
'                Dim RightVariablePluralName: RightVariablePluralName = rs2.fields("RightVariablePluralName"): If ExitIfTrue(isFalse(RightVariablePluralName), "RightVariablePluralName is empty..") Then Exit Function
'                fields.Add fieldName & ": " & RightVariablePluralName & " && " & RightVariablePluralName & ".length > 0 ? " & RightVariablePluralName & "[0].id.toString() : """""
            Else
                fields.Add fieldName & ": """""
            End If
        End If
        rs.MoveNext
    Loop
    
    Dim TemplateContent: TemplateContent = GetTemplateContent("Push at least one blank row")
    Dim replacedContent
    replacedContent = replace(TemplateContent, "[PluralizedModelName]", LeftPluralizedModelName)
    replacedContent = replace(replacedContent, "[Fields]", fields.JoinArr("," & vbNewLine))
    
    Dim lines As New clsArray
    lines.Add "//Generated by PushAtLeastOneRow"
    lines.Add replacedContent
    PushAtLeastOneRow = lines.JoinArr(vbNewLine)
    CopyToClipboard PushAtLeastOneRow
    
End Function

Public Function CreateSequelizeMigrationForForeignKeyAddition(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftVariableName: LeftVariableName = rs.fields("LeftVariableName"): If ExitIfTrue(isFalse(LeftVariableName), "LeftVariableName is empty..") Then Exit Function
    Dim RightVariableName: RightVariableName = rs.fields("RightVariableName"): If ExitIfTrue(isFalse(RightVariableName), "RightVariableName is empty..") Then Exit Function
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey"): If ExitIfTrue(isFalse(LeftForeignKey), "LeftForeignKey is empty..") Then Exit Function
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    Dim RightModelID: RightModelID = rs.fields("RightModelID"): If ExitIfTrue(isFalse(RightModelID), "RightModelID is empty..") Then Exit Function
    
    Dim ForeignKeyName: ForeignKeyName = LCase(LeftVariableName) & "_" & LCase(RightVariableName)
    Dim LeftKey: LeftKey = ELookup("qrySeqModelFields", "FieldName = " & Esc(LeftForeignKey) & _
        " AND SeqModelID = " & LeftModelID, "DatabaseFieldName")
    Dim RightKey: RightKey = ELookup("qrySeqModelFields", "PrimaryKey AND SeqModelID = " & RightModelID, "DatabaseFieldName")
    
    CreateSequelizeMigrationForForeignKeyAddition = GetReplacedTemplate(rs, "Migration File For Foreign Key Addition")
    CreateSequelizeMigrationForForeignKeyAddition = replace(CreateSequelizeMigrationForForeignKeyAddition, "[ForeignKeyName]", ForeignKeyName)
    CreateSequelizeMigrationForForeignKeyAddition = replace(CreateSequelizeMigrationForForeignKeyAddition, "[LeftKey]", LeftKey)
    CreateSequelizeMigrationForForeignKeyAddition = replace(CreateSequelizeMigrationForForeignKeyAddition, "[RightKey]", RightKey)
    CreateSequelizeMigrationForForeignKeyAddition = GetGeneratedByFunctionSnippet(CreateSequelizeMigrationForForeignKeyAddition, "CreateSequelizeMigrationForForeignKeyAddition")
    CopyToClipboard CreateSequelizeMigrationForForeignKeyAddition
    
    Dim ProjectPath: ProjectPath = rs.fields("ProjectPath"): If ExitIfTrue(isFalse(ProjectPath), "ProjectPath is empty..") Then Exit Function
    Dim fileName: fileName = ConvertToCustomTimestamp & "-add_fk_" & ForeignKeyName & ".js"
    Dim filePath: filePath = ProjectPath & "src\migrations\" & fileName
    WriteToFile filePath, CreateSequelizeMigrationForForeignKeyAddition
    
End Function

Public Function GetReferencesKeyForModelCreationMigration(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetReferencesKeyForModelCreationMigration = GetReplacedTemplate(rs, "references key for model creation")
    GetReferencesKeyForModelCreationMigration = GetGeneratedByFunctionSnippet(GetReferencesKeyForModelCreationMigration, "GetReferencesKeyForModelCreationMigration", "references key for model creation")
    CopyToClipboard GetReferencesKeyForModelCreationMigration
    
End Function

Public Function GetRelationshipClsjoin(frm As Object, Optional SeqModelRelationshipID = "", Optional relationshipType = "LEFT")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelationshipClsjoin = GetReplacedTemplate(rs, "modelJoin from relationship")
    GetRelationshipClsjoin = replace(GetRelationshipClsjoin, "[GetRelationshipType]", relationshipType)
    GetRelationshipClsjoin = GetGeneratedByFunctionSnippet(GetRelationshipClsjoin, "GetRelationshipClsjoin")
    CopyToClipboard GetRelationshipClsjoin
    
End Function

Public Function GetSimpleJoinSnippet(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function

    GetSimpleJoinSnippet = GetReplacedTemplate(rs, "Simple Join Snippet")
    GetSimpleJoinSnippet = replace(GetSimpleJoinSnippet, "[GetAllSimpleJoinFieldsBySeqModel]", GetAllSimpleJoinFieldsBySeqModel(frm, LeftModelID))
    GetSimpleJoinSnippet = GetGeneratedByFunctionSnippet(GetSimpleJoinSnippet, "GetSimpleJoinSnippet")
    CopyToClipboard GetSimpleJoinSnippet
    
End Function

Public Function GetSimpleJoinSnippetUsingRightModel(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    Dim RightModelID: RightModelID = rs.fields("RightModelID"): If ExitIfTrue(isFalse(RightModelID), "RightModelID is empty..") Then Exit Function

    GetSimpleJoinSnippetUsingRightModel = GetReplacedTemplate(rs, "Simple Join Snippet using Right Model")
    GetSimpleJoinSnippetUsingRightModel = replace(GetSimpleJoinSnippetUsingRightModel, "[GetAllSimpleJoinFieldsBySeqModel]", GetAllSimpleJoinFieldsBySeqModel(frm, RightModelID))
    GetSimpleJoinSnippetUsingRightModel = GetGeneratedByFunctionSnippet(GetSimpleJoinSnippetUsingRightModel, "GetSimpleJoinSnippetUsingRightModel")
    CopyToClipboard GetSimpleJoinSnippetUsingRightModel
    
End Function

Public Function Get_listNameFromRelationship(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    Get_listNameFromRelationship = GetReplacedTemplate(rs, "Get_listNameFromRelationship")
    CopyToClipboard Get_listNameFromRelationship
    
End Function

Public Function GetRelatedInterfaceImport(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedInterfaceImport = GetReplacedTemplate(rs, "RelatedInterfaceImport")
    GetRelatedInterfaceImport = GetGeneratedByFunctionSnippet(GetRelatedInterfaceImport, "GetRelatedInterfaceImport", "RelatedInterfaceImport")
    CopyToClipboard GetRelatedInterfaceImport
    
End Function

Public Function GetRelatedUpdatePayload(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedUpdatePayload = GetReplacedTemplate(rs, "RelatedUpdatePayload")
    GetRelatedUpdatePayload = GetGeneratedByFunctionSnippet(GetRelatedUpdatePayload, "GetRelatedUpdatePayload")
    CopyToClipboard GetRelatedUpdatePayload
    
End Function

Public Function GetAPIRelatedImport(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetAPIRelatedImport = GetReplacedTemplate(rs, "APIRelatedImport")
    GetAPIRelatedImport = GetGeneratedByFunctionSnippet(GetAPIRelatedImport, "GetAPIRelatedImport")
    CopyToClipboard GetAPIRelatedImport
    
End Function

Public Function GetChildModelInterface(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetChildModelInterface = GetReplacedTemplate(rs, "ChildModelInterface")
    GetChildModelInterface = GetGeneratedByFunctionSnippet(GetChildModelInterface, "GetChildModelInterface", "ChildModelInterface", , True)
    CopyToClipboard GetChildModelInterface
    
End Function

Public Function GetParentModelInterface(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetParentModelInterface = GetReplacedTemplate(rs, "ParentModelInterface")
    GetParentModelInterface = GetGeneratedByFunctionSnippet(GetParentModelInterface, "GetParentModelInterface", "ParentModelInterface", , True)
    CopyToClipboard GetParentModelInterface
    
End Function

Public Function GetRelatedUpdatePayloadParent(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedUpdatePayloadParent = GetReplacedTemplate(rs, "RelatedUpdatePayloadParent")
    CopyToClipboard GetRelatedUpdatePayloadParent
    
End Function


Public Function GetRelatedPluralizedModelName(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedPluralizedModelName = GetReplacedTemplate(rs, "RelatedPluralizedModelName")
    GetRelatedPluralizedModelName = GetGeneratedByFunctionSnippet(GetRelatedPluralizedModelName, "GetRelatedPluralizedModelName", "RelatedPluralizedModelName", , True)
    CopyToClipboard GetRelatedPluralizedModelName
    
End Function

Public Function GetRelatedModelName(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedModelName = GetReplacedTemplate(rs, "RelatedModelName")
    GetRelatedModelName = GetGeneratedByFunctionSnippet(GetRelatedModelName, "GetRelatedModelName", "RelatedModelName", , True)
    CopyToClipboard GetRelatedModelName
    
End Function

Public Function GetEscapedPluralizedModelName(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetEscapedPluralizedModelName = GetReplacedTemplate(rs, "EscapedPluralizedModelName")
    CopyToClipboard GetEscapedPluralizedModelName
    
End Function

Public Function GetModelUpdatePayload(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetModelUpdatePayload = GetReplacedTemplate(rs, "ModelUpdatePayload")
    GetModelUpdatePayload = GetGeneratedByFunctionSnippet(GetModelUpdatePayload, "GetModelUpdatePayload", "ModelUpdatePayload")
    CopyToClipboard GetModelUpdatePayload
    
End Function

Public Function GetModelFormikInitialValue(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetModelFormikInitialValue = GetReplacedTemplate(rs, "ModelFormikInitialValue")
    CopyToClipboard GetModelFormikInitialValue
    
End Function

Public Function GetRelatedPartialPayload(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedPartialPayload = GetReplacedTemplate(rs, "GetRelatedPartialPayload")
    CopyToClipboard GetRelatedPartialPayload
    
End Function

Public Function WriteToLeftModelSubform_tsx(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelName: LeftModelName = rs.fields("LeftModelName"): If ExitIfTrue(isFalse(LeftModelName), "LeftModelName is empty..") Then Exit Function
    Dim RightModelID: RightModelID = rs.fields("RightModelID"): If ExitIfTrue(isFalse(RightModelID), "RightModelID is empty..") Then Exit Function
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey"): If ExitIfTrue(isFalse(LeftForeignKey), "LeftForeignKey is empty..") Then Exit Function
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    
    Dim GetLastFieldInSubform: GetLastFieldInSubform = ELookup("qrySeqModelFields", "DatabaseFieldName <> " & Esc(LeftForeignKey) & _
        " AND Not PrimaryKey AND SeqModelID = " & LeftModelID, "FieldName", "FieldOrder DESC")
        
    Dim OrderField: OrderField = ELookup("qrySeqModelFields", "SeqModelID = " & LeftModelID & " AND OrderField", "FieldName")
    ''OrderField Related Snippets
    Dim ImportDraggableModules, GetAddOrderField, GetReorderRowFunction, GetHideOrderField, GetSortableTableHead, GetDraggableRow
    Dim GetTableRow
    If Not isFalse(OrderField) Then
        ImportDraggableModules = GetReplacedTemplate(rs, "ImportDraggableModules")
        GetAddOrderField = GetReplacedTemplate(rs, "GetAddOrderField"): GetAddOrderField = replace(GetAddOrderField, "[OrderField]", OrderField)
        GetReorderRowFunction = GetReplacedTemplate(rs, "GetReorderRowFunction"): GetReorderRowFunction = replace(GetReorderRowFunction, "[OrderField]", OrderField)
        GetHideOrderField = GetReplacedTemplate(rs, "GetHideOrderField"): GetHideOrderField = replace(GetHideOrderField, "[OrderField]", OrderField)
        GetSortableTableHead = GetReplacedTemplate(rs, "GetSortableTableHead"): GetSortableTableHead = replace(GetSortableTableHead, "[OrderField]", OrderField)
        GetDraggableRow = GetReplacedTemplate(rs, "GetDraggableRow"): GetDraggableRow = replace(GetDraggableRow, "[OrderField]", OrderField)
    Else
        GetTableRow = GetReplacedTemplate(rs, "GetTableRow"): GetTableRow = replace(GetTableRow, "[OrderField]", OrderField)
    End If
    
    WriteToLeftModelSubform_tsx = GetReplacedTemplate(rs, "LeftModelSubform.tsx")
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetLastFieldInSubform]", GetLastFieldInSubform)
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetAllRequiredListForTableForm]", GetAllRequiredListForTableForm(frm, LeftModelID, RightModelID))
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetAllUseRightModelListForColumn]", GetAllUseRightModelListForColumn(frm, LeftModelID, RightModelID))
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetAllRightModelListImportForColumn]", GetAllRightModelListImportForColumn(frm, LeftModelID, RightModelID))
    
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[ImportDraggableModules]", ImportDraggableModules)
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetAddOrderField]", GetAddOrderField)
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetReorderRowFunction]", GetReorderRowFunction)
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetHideOrderField]", GetHideOrderField)
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetSortableTableHead]", GetSortableTableHead)
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetDraggableRow]", GetDraggableRow)
    WriteToLeftModelSubform_tsx = replace(WriteToLeftModelSubform_tsx, "[GetTableRow]", GetTableRow)
    
    WriteToLeftModelSubform_tsx = GetGeneratedByFunctionSnippet(WriteToLeftModelSubform_tsx, "WriteToLeftModelSubform_tsx", "LeftModelSubform.tsx")
    
    ''C:\Users\User\Desktop\Web Development\marvel-duel-next-13\src\components\decks\HeroSkillSubform.tsx
    Dim RightModelPath: RightModelPath = rs.fields("RightModelPath"): If ExitIfTrue(isFalse(RightModelPath), "ModelPath is empty..") Then Exit Function
    Dim ClientPath: ClientPath = rs.fields("ClientPath"): If ExitIfTrue(isFalse(ClientPath), "ClientPath is empty..") Then Exit Function
    Dim filePath: filePath = ClientPath & "src\components\" & RightModelPath & "\" & LeftModelName & "Subform.tsx"
    WriteToFile filePath, WriteToLeftModelSubform_tsx, RightModelID
    
    CopyToClipboard WriteToLeftModelSubform_tsx
    
End Function

Public Function GetIndexAndID(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetIndexAndID = GetReplacedTemplate(rs, "RelatedIndexAndID")
    CopyToClipboard GetIndexAndID
    
End Function

Public Function GetRelatedSubform(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    
    Dim OrderField: OrderField = ELookup("qrySeqModelFields", "SeqModelID = " & LeftModelID & " AND OrderField", "FieldName")
    
    GetRelatedSubform = GetReplacedTemplate(rs, "GetRelatedSubform")
    If Not isFalse(OrderField) Then
        GetRelatedSubform = "<DndProvider backend={HTML5Backend}>" & GetRelatedSubform & "</DndProvider>"
    End If
    GetRelatedSubform = GetGeneratedByFunctionSnippet(GetRelatedSubform, "GetRelatedSubform", "GetRelatedSubform", True)
    CopyToClipboard GetRelatedSubform
    
End Function

Public Function GetModelFormRelatedConstantsImport(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim IsSimpleRelationship: IsSimpleRelationship = rs.fields("IsSimpleRelationship")
    Dim templateName As String: templateName = IIf(IsSimpleRelationship, "GetAllModelFormRelatedConstantsImportSimpleRelationship", "GetAllModelFormRelatedConstantsImport")
    
    GetModelFormRelatedConstantsImport = GetReplacedTemplate(rs, templateName)
    GetModelFormRelatedConstantsImport = GetGeneratedByFunctionSnippet(GetModelFormRelatedConstantsImport, "GetModelFormRelatedConstantsImport", templateName)
    CopyToClipboard GetModelFormRelatedConstantsImport
    
End Function

Public Function GetRelatedModelEmptyArray(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedModelEmptyArray = GetReplacedTemplate(rs, "GetRelatedModelEmptyArray")
    GetRelatedModelEmptyArray = GetGeneratedByFunctionSnippet(GetRelatedModelEmptyArray, "GetRelatedModelEmptyArray", "GetRelatedModelEmptyArray")
    CopyToClipboard GetRelatedModelEmptyArray
    
End Function

Public Function GetRelatedModelMapToInitialValue(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedModelMapToInitialValue = GetReplacedTemplate(rs, "RelatedModelMapToInitialValue")
    GetRelatedModelMapToInitialValue = GetGeneratedByFunctionSnippet(GetRelatedModelMapToInitialValue, "GetRelatedModelMapToInitialValue", "RelatedModelMapToInitialValue")
    CopyToClipboard GetRelatedModelMapToInitialValue
    
End Function

Public Function GetRelatedModelSortInitialValue(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    
    Dim OrderField: OrderField = ELookup("qrySeqModelFields", "SeqModelID = " & LeftModelID & " AND OrderField", "FieldName")
    Dim GetRelatedModelReplaceHighestOrder
    If Not isFalse(OrderField) Then
        GetRelatedModelReplaceHighestOrder = GetReplacedTemplate(rs, "GetRelatedModelReplaceHighestOrder"): GetRelatedModelReplaceHighestOrder = replace(GetRelatedModelReplaceHighestOrder, "[OrderField]", OrderField)
        GetRelatedModelReplaceHighestOrder = GetGeneratedByFunctionSnippet(GetRelatedModelReplaceHighestOrder, "GetRelatedModelReplaceHighestOrder")
    End If
    
    GetRelatedModelSortInitialValue = GetReplacedTemplate(rs, "GetRelatedModelSortInitialValue")
    
    GetRelatedModelSortInitialValue = replace(GetRelatedModelSortInitialValue, "[GetRelatedModelReplaceHighestOrder]", GetRelatedModelReplaceHighestOrder)
    
    GetRelatedModelSortInitialValue = GetGeneratedByFunctionSnippet(GetRelatedModelSortInitialValue, "GetRelatedModelSortInitialValue", "GetRelatedModelSortInitialValue")
    CopyToClipboard GetRelatedModelSortInitialValue
    
End Function

Public Function GetRelatedPayloadAssignment(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedPayloadAssignment = GetReplacedTemplate(rs, "GetRelatedPayloadAssignment")
    GetRelatedPayloadAssignment = GetGeneratedByFunctionSnippet(GetRelatedPayloadAssignment, "GetRelatedPayloadAssignment", "GetRelatedPayloadAssignment")
    CopyToClipboard GetRelatedPayloadAssignment
    
End Function
Public Function GetReplaceEmptyRelatedModel(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetReplaceEmptyRelatedModel = GetReplacedTemplate(rs, "GetReplaceEmptyRelatedModel")
    GetReplaceEmptyRelatedModel = GetGeneratedByFunctionSnippet(GetReplaceEmptyRelatedModel, "GetReplaceEmptyRelatedModel", "GetReplaceEmptyRelatedModel")
    CopyToClipboard GetReplaceEmptyRelatedModel
End Function

Public Function GetRelatedModelSortFromStore(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedModelSortFromStore = GetReplacedTemplate(rs, "GetRelatedModelSortFromStore")
    CopyToClipboard GetRelatedModelSortFromStore
    
End Function

Public Function GetRelatedListFromRelatedModel(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedListFromRelatedModel = GetReplacedTemplate(rs, "GetRelatedListFromRelatedModel")
    GetRelatedListFromRelatedModel = GetGeneratedByFunctionSnippet(GetRelatedListFromRelatedModel, "GetRelatedListFromRelatedModel", "GetRelatedListFromRelatedModel")
    CopyToClipboard GetRelatedListFromRelatedModel
    
End Function

Public Function GetModelFormRequiredListImport(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetModelFormRequiredListImport = GetReplacedTemplate(rs, "GetModelFormRequiredListImport")
    GetModelFormRequiredListImport = GetGeneratedByFunctionSnippet(GetModelFormRequiredListImport, "GetModelFormRequiredListImport", "GetModelFormRequiredListImport")
    CopyToClipboard GetModelFormRequiredListImport
    
End Function

Public Function GetRelatedModelUpdateOrInsert(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedModelUpdateOrInsert = GetReplacedTemplate(rs, "GetRelatedModelUpdateOrInsert")
    GetRelatedModelUpdateOrInsert = GetGeneratedByFunctionSnippet(GetRelatedModelUpdateOrInsert, "GetRelatedModelUpdateOrInsert", "GetRelatedModelUpdateOrInsert")
    CopyToClipboard GetRelatedModelUpdateOrInsert
End Function

Public Function GetRelatedModelKeyValue(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedModelKeyValue = GetReplacedTemplate(rs, "GetRelatedModelKeyValue")
    GetRelatedModelKeyValue = GetGeneratedByFunctionSnippet(GetRelatedModelKeyValue, "GetRelatedModelKeyValue", "GetRelatedModelKeyValue", , True)
    CopyToClipboard GetRelatedModelKeyValue
    
End Function

Public Function GetRelatedRightModelImport(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedRightModelImport = GetReplacedTemplate(rs, "GetRelatedRightModelImport")
    GetRelatedRightModelImport = GetGeneratedByFunctionSnippet(GetRelatedRightModelImport, "GetRelatedRightModelImport", "GetRelatedRightModelImport", , True)
    CopyToClipboard GetRelatedRightModelImport
    
End Function

Public Function GetRelatedRightModelInterface(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    Dim RelationshipAlias: RelationshipAlias = rs.fields("RelationshipAlias")
    Dim RightModelName: RightModelName = rs.fields("RightModelName")
    Dim vRelationshipAlias: vRelationshipAlias = Nz(RelationshipAlias, RightModelName)
    
    GetRelatedRightModelInterface = GetReplacedTemplate(rs, "GetRelatedRightModelInterface")
    GetRelatedRightModelInterface = replace(GetRelatedRightModelInterface, "[vRelationshipAlias]", vRelationshipAlias)
    GetRelatedRightModelInterface = GetGeneratedByFunctionSnippet(GetRelatedRightModelInterface, "GetRelatedRightModelInterface", "GetRelatedRightModelInterface", , True)
    CopyToClipboard GetRelatedRightModelInterface
    
End Function

Public Function GetSQLRightJoinSnippetFromRelationship(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSQLRightJoinSnippetFromRelationship = GetReplacedTemplate(rs, "GetSQLRightJoinSnippetFromRelationship")
    GetSQLRightJoinSnippetFromRelationship = GetGeneratedByFunctionSnippet(GetSQLRightJoinSnippetFromRelationship, "GetSQLRightJoinSnippetFromRelationship", "GetSQLRightJoinSnippetFromRelationship")
    CopyToClipboard GetSQLRightJoinSnippetFromRelationship
    
End Function

Public Function GetRightModelJoinCancellationSnippet(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRightModelJoinCancellationSnippet = GetReplacedTemplate(rs, "GetRightModelJoinCancellationSnippet")
    GetRightModelJoinCancellationSnippet = GetGeneratedByFunctionSnippet(GetRightModelJoinCancellationSnippet, "GetRightModelJoinCancellationSnippet", "GetRightModelJoinCancellationSnippet")
    CopyToClipboard GetRightModelJoinCancellationSnippet
    
End Function

Public Function GetRightJoinName(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRightJoinName = GetReplacedTemplate(rs, "GetRightJoinName")
    GetRightJoinName = GetGeneratedByFunctionSnippet(GetRightJoinName, "GetRightJoinName", "GetRightJoinName", , True)
    CopyToClipboard GetRightJoinName
    
End Function

Public Function GetRightModelgetModelSQLSnippet(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim RightModelID: RightModelID = rs.fields("RightModelID"): If ExitIfTrue(isFalse(RightModelID), "RightModelID is empty..") Then Exit Function
    
    GetRightModelgetModelSQLSnippet = GetReplacedTemplate(rs, "GetRightModelgetModelSQLSnippet")
    GetRightModelgetModelSQLSnippet = replace(GetRightModelgetModelSQLSnippet, "[GenerateSQLFieldList]", GenerateSQLFieldList(frm, RightModelID))
    GetRightModelgetModelSQLSnippet = GetGeneratedByFunctionSnippet(GetRightModelgetModelSQLSnippet, "GetRightModelgetModelSQLSnippet", "GetRightModelgetModelSQLSnippet")
    CopyToClipboard GetRightModelgetModelSQLSnippet
    
End Function

Public Function GetSQLLeftJoinSnippetFromRelationship(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSQLLeftJoinSnippetFromRelationship = GetReplacedTemplate(rs, "GetSQLLeftJoinSnippetFromRelationship")
    GetSQLLeftJoinSnippetFromRelationship = GetGeneratedByFunctionSnippet(GetSQLLeftJoinSnippetFromRelationship, "GetSQLLeftJoinSnippetFromRelationship", "GetSQLLeftJoinSnippetFromRelationship")
    CopyToClipboard GetSQLLeftJoinSnippetFromRelationship
    
End Function

Public Function GetLeftModelJoinCancellationSnippet(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetLeftModelJoinCancellationSnippet = GetReplacedTemplate(rs, "GetLeftModelJoinCancellationSnippet")
    GetLeftModelJoinCancellationSnippet = GetGeneratedByFunctionSnippet(GetLeftModelJoinCancellationSnippet, "GetLeftModelJoinCancellationSnippet", "GetLeftModelJoinCancellationSnippet")
    CopyToClipboard GetLeftModelJoinCancellationSnippet
    
End Function

Public Function GetLeftJoinName(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetLeftJoinName = GetReplacedTemplate(rs, "GetLeftJoinName")
    GetLeftJoinName = GetGeneratedByFunctionSnippet(GetLeftJoinName, "GetLeftJoinName", "GetLeftJoinName", , True)
    CopyToClipboard GetLeftJoinName
    
End Function

Public Function GetLeftModelReduceResultAndRemoveDuplicates(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetLeftModelReduceResultAndRemoveDuplicates = GetReplacedTemplate(rs, "GetLeftModelReduceResultAndRemoveDuplicates")
    GetLeftModelReduceResultAndRemoveDuplicates = GetGeneratedByFunctionSnippet(GetLeftModelReduceResultAndRemoveDuplicates, "GetLeftModelReduceResultAndRemoveDuplicates", "GetLeftModelReduceResultAndRemoveDuplicates")
    CopyToClipboard GetLeftModelReduceResultAndRemoveDuplicates
    
End Function

Public Function GetGetmodelsqlLeftModelChildNext13(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function

    GetGetmodelsqlLeftModelChildNext13 = GetReplacedTemplate(rs, "GetGetmodelsqlLeftModelChildNext13")
    GetGetmodelsqlLeftModelChildNext13 = replace(GetGetmodelsqlLeftModelChildNext13, "[GenerateSQLFieldList]", GenerateSQLFieldList(frm, LeftModelID))
    GetGetmodelsqlLeftModelChildNext13 = replace(GetGetmodelsqlLeftModelChildNext13, "[GenerateSeqModelFilters]", GenerateSeqModelFilters(frm, LeftModelID))
    GetGetmodelsqlLeftModelChildNext13 = GetGeneratedByFunctionSnippet(GetGetmodelsqlLeftModelChildNext13, "GetGetmodelsqlLeftModelChildNext13", "GetGetmodelsqlLeftModelChildNext13")
    CopyToClipboard GetGetmodelsqlLeftModelChildNext13
    
End Function

Public Function GetRelatedRightModelListFromRelatedModel(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    Dim RightModelID: RightModelID = rs.fields("RightModelID"): If ExitIfTrue(isFalse(RightModelID), "RightModelID is empty..") Then Exit Function
    
    GetRelatedRightModelListFromRelatedModel = GetReplacedTemplate(rs, "GetRelatedRightModelListFromRelatedModel")
    GetRelatedRightModelListFromRelatedModel = replace(GetRelatedRightModelListFromRelatedModel, "[GetAllRightModelPushPlaceholder]", GetAllRightModelPushPlaceholder(frm, LeftModelID, RightModelID))
    GetRelatedRightModelListFromRelatedModel = GetGeneratedByFunctionSnippet(GetRelatedRightModelListFromRelatedModel, "GetRelatedRightModelListFromRelatedModel", "GetRelatedRightModelListFromRelatedModel")
    CopyToClipboard GetRelatedRightModelListFromRelatedModel
    
End Function

Public Function GetModelFormRequiredRightModelListImport(frm As Object, Optional SeqModelRelationshipID = "") As String

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    If Not isPresent("tblSeqModelRelationships", "RightModelID = " & LeftModelID) Then
        GetModelFormRequiredRightModelListImport = GetReplacedTemplate(rs, "GetModelFormRequiredRightModelListImport")
        GetModelFormRequiredRightModelListImport = GetGeneratedByFunctionSnippet(GetModelFormRequiredRightModelListImport, "GetModelFormRequiredRightModelListImport", "GetModelFormRequiredRightModelListImport")
        CopyToClipboard GetModelFormRequiredRightModelListImport
    End If
    
End Function

Public Function GetRelatedRightModelName(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedRightModelName = GetReplacedTemplate(rs, "GetRelatedRightModelName")
    GetRelatedRightModelName = GetGeneratedByFunctionSnippet(GetRelatedRightModelName, "GetRelatedRightModelName", "GetRelatedRightModelName", , True)
    CopyToClipboard GetRelatedRightModelName
    
End Function

Public Function GetAPIRelatedLeftModelImport(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetAPIRelatedLeftModelImport = GetReplacedTemplate(rs, "GetAPIRelatedLeftModelImport")
    GetAPIRelatedLeftModelImport = GetGeneratedByFunctionSnippet(GetAPIRelatedLeftModelImport, "GetAPIRelatedLeftModelImport", "GetAPIRelatedLeftModelImport")
    CopyToClipboard GetAPIRelatedLeftModelImport
    
End Function
Public Function GetAPIRelatedRightModelImport(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetAPIRelatedRightModelImport = GetReplacedTemplate(rs, "GetAPIRelatedRightModelImport")
    GetAPIRelatedRightModelImport = GetGeneratedByFunctionSnippet(GetAPIRelatedRightModelImport, "GetAPIRelatedRightModelImport", "GetAPIRelatedRightModelImport")
    CopyToClipboard GetAPIRelatedRightModelImport
End Function

Public Function GetRelatedSimpleModelFromRes(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedSimpleModelFromRes = GetReplacedTemplate(rs, "GetRelatedSimpleModelFromRes")
    GetRelatedSimpleModelFromRes = GetGeneratedByFunctionSnippet(GetRelatedSimpleModelFromRes, "GetRelatedSimpleModelFromRes", "GetRelatedSimpleModelFromRes")
    CopyToClipboard GetRelatedSimpleModelFromRes
    
End Function

Public Function GetThroughModelUpdateOrInsert(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetThroughModelUpdateOrInsert = GetReplacedTemplate(rs, "GetThroughModelUpdateOrInsert")
    GetThroughModelUpdateOrInsert = GetGeneratedByFunctionSnippet(GetThroughModelUpdateOrInsert, "GetThroughModelUpdateOrInsert", "GetThroughModelUpdateOrInsert")
    CopyToClipboard GetThroughModelUpdateOrInsert
    
End Function

Public Function GetAllRelatedListFromModel(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetAllRelatedListFromModel = GetReplacedTemplate(rs, "GetRelatedListFromRelatedModel")
    GetAllRelatedListFromModel = GetGeneratedByFunctionSnippet(GetAllRelatedListFromModel, "GetAllRelatedListFromModel", "GetRelatedListFromRelatedModel")
    CopyToClipboard GetAllRelatedListFromModel
End Function

Public Function GetOriginalSimpleRelatedModel(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetOriginalSimpleRelatedModel = GetReplacedTemplate(rs, "GetOriginalSimpleRelatedModel")
    GetOriginalSimpleRelatedModel = GetGeneratedByFunctionSnippet(GetOriginalSimpleRelatedModel, "GetOriginalSimpleRelatedModel", "GetOriginalSimpleRelatedModel")
    CopyToClipboard GetOriginalSimpleRelatedModel
End Function

Public Function GetRelatedSimpleModelMapToInitialValue(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedSimpleModelMapToInitialValue = GetReplacedTemplate(rs, "GetRelatedSimpleModelMapToInitialValue")
    GetRelatedSimpleModelMapToInitialValue = GetGeneratedByFunctionSnippet(GetRelatedSimpleModelMapToInitialValue, "GetRelatedSimpleModelMapToInitialValue", "GetRelatedSimpleModelMapToInitialValue")
    CopyToClipboard GetRelatedSimpleModelMapToInitialValue
End Function
Public Function GetAddedAndDeletedSimpleRelationship(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetAddedAndDeletedSimpleRelationship = GetReplacedTemplate(rs, "GetAddedAndDeletedSimpleRelationship")
    GetAddedAndDeletedSimpleRelationship = GetGeneratedByFunctionSnippet(GetAddedAndDeletedSimpleRelationship, "GetAddedAndDeletedSimpleRelationship", "GetAddedAndDeletedSimpleRelationship")
    CopyToClipboard GetAddedAndDeletedSimpleRelationship
End Function
Public Function GetRelatedSimplePayloadAssignment(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedSimplePayloadAssignment = GetReplacedTemplate(rs, "GetRelatedSimplePayloadAssignment")
    GetRelatedSimplePayloadAssignment = GetGeneratedByFunctionSnippet(GetRelatedSimplePayloadAssignment, "GetRelatedSimplePayloadAssignment", "GetRelatedSimplePayloadAssignment")
    CopyToClipboard GetRelatedSimplePayloadAssignment
End Function
Public Function GetRelatedSimpleFacetedControl(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedSimpleFacetedControl = GetReplacedTemplate(rs, "GetRelatedSimpleFacetedControl")
    GetRelatedSimpleFacetedControl = GetGeneratedByFunctionSnippet(GetRelatedSimpleFacetedControl, "GetRelatedSimpleFacetedControl", "GetRelatedSimpleFacetedControl", True)
    CopyToClipboard GetRelatedSimpleFacetedControl
End Function
Public Function GetUpdateOriginalRelatedSimpleModels(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetUpdateOriginalRelatedSimpleModels = GetReplacedTemplate(rs, "GetUpdateOriginalRelatedSimpleModels")
    GetUpdateOriginalRelatedSimpleModels = GetGeneratedByFunctionSnippet(GetUpdateOriginalRelatedSimpleModels, "GetUpdateOriginalRelatedSimpleModels", "GetUpdateOriginalRelatedSimpleModels")
    CopyToClipboard GetUpdateOriginalRelatedSimpleModels
End Function
Public Function GetRelatedIDSimple(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedIDSimple = GetReplacedTemplate(rs, "GetRelatedIDSimple")
    GetRelatedIDSimple = GetGeneratedByFunctionSnippet(GetRelatedIDSimple, "GetRelatedIDSimple", "GetRelatedIDSimple")
    CopyToClipboard GetRelatedIDSimple
End Function
Public Function GetSimpleRelatedKey(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSimpleRelatedKey = GetReplacedTemplate(rs, "GetSimpleRelatedKey")
    GetSimpleRelatedKey = GetGeneratedByFunctionSnippet(GetSimpleRelatedKey, "GetSimpleRelatedKey", "GetSimpleRelatedKey")
    CopyToClipboard GetSimpleRelatedKey
End Function
Public Function GetSimplePluralizedFieldName(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSimplePluralizedFieldName = GetReplacedTemplate(rs, "GetSimplePluralizedFieldName")
    GetSimplePluralizedFieldName = GetGeneratedByFunctionSnippet(GetSimplePluralizedFieldName, "GetSimplePluralizedFieldName", "GetSimplePluralizedFieldName", , True)
    CopyToClipboard GetSimplePluralizedFieldName
End Function
Public Function GetSimpleRelatedKeyPayload(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSimpleRelatedKeyPayload = GetReplacedTemplate(rs, "GetSimpleRelatedKeyPayload")
    GetSimpleRelatedKeyPayload = GetGeneratedByFunctionSnippet(GetSimpleRelatedKeyPayload, "GetSimpleRelatedKeyPayload", "GetSimpleRelatedKeyPayload")
    CopyToClipboard GetSimpleRelatedKeyPayload
End Function

Public Function GetSimpleModelInserts(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSimpleModelInserts = GetReplacedTemplate(rs, "GetSimpleModelInserts")
    GetSimpleModelInserts = GetGeneratedByFunctionSnippet(GetSimpleModelInserts, "GetSimpleModelInserts", "GetSimpleModelInserts")
    CopyToClipboard GetSimpleModelInserts
End Function

Public Function GetSimplePluralizedModelName(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSimplePluralizedModelName = GetReplacedTemplate(rs, "GetSimplePluralizedModelName")
    GetSimplePluralizedModelName = GetGeneratedByFunctionSnippet(GetSimplePluralizedModelName, "GetSimplePluralizedModelName", "GetSimplePluralizedModelName", , True)
    CopyToClipboard GetSimplePluralizedModelName
End Function
Public Function GetCreateSimpleModelFromRoute(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetCreateSimpleModelFromRoute = GetReplacedTemplate(rs, "GetCreateSimpleModelFromRoute")
    GetCreateSimpleModelFromRoute = GetGeneratedByFunctionSnippet(GetCreateSimpleModelFromRoute, "GetCreateSimpleModelFromRoute", "GetCreateSimpleModelFromRoute")
    CopyToClipboard GetCreateSimpleModelFromRoute
End Function
Public Function GetSimpleOriginalModelState(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSimpleOriginalModelState = GetReplacedTemplate(rs, "GetSimpleOriginalModelState")
    GetSimpleOriginalModelState = GetGeneratedByFunctionSnippet(GetSimpleOriginalModelState, "GetSimpleOriginalModelState", "GetSimpleOriginalModelState")
    CopyToClipboard GetSimpleOriginalModelState
End Function
Public Function GetRightModelDefaultList(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRightModelDefaultList = GetReplacedTemplate(rs, "GetRightModelDefaultList")
    GetRightModelDefaultList = GetGeneratedByFunctionSnippet(GetRightModelDefaultList, "GetRightModelDefaultList", "GetRightModelDefaultList")
    CopyToClipboard GetRightModelDefaultList
End Function

Public Function GetSetOriginalSimpleModel(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSetOriginalSimpleModel = GetReplacedTemplate(rs, "GetSetOriginalSimpleModel")
    GetSetOriginalSimpleModel = GetGeneratedByFunctionSnippet(GetSetOriginalSimpleModel, "GetSetOriginalSimpleModel", "GetSetOriginalSimpleModel")
    CopyToClipboard GetSetOriginalSimpleModel
End Function

Public Function GetRightModelListImportForColumn(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRightModelListImportForColumn = GetReplacedTemplate(rs, "GetRightModelListImportForColumn")
    GetRightModelListImportForColumn = GetGeneratedByFunctionSnippet(GetRightModelListImportForColumn, "GetRightModelListImportForColumn", "GetRightModelListImportForColumn")
    CopyToClipboard GetRightModelListImportForColumn
End Function

Public Function GetUseRightModelListForColumn(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetUseRightModelListForColumn = GetReplacedTemplate(rs, "GetUseRightModelListForColumn")
    GetUseRightModelListForColumn = GetGeneratedByFunctionSnippet(GetUseRightModelListForColumn, "GetUseRightModelListForColumn", "GetUseRightModelListForColumn")
    CopyToClipboard GetUseRightModelListForColumn
End Function
Public Function GetRelatedLeftModelImportRoute(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedLeftModelImportRoute = GetReplacedTemplate(rs, "GetRelatedLeftModelImportRoute")
    GetRelatedLeftModelImportRoute = GetGeneratedByFunctionSnippet(GetRelatedLeftModelImportRoute, "GetRelatedLeftModelImportRoute", "GetRelatedLeftModelImportRoute")
    CopyToClipboard GetRelatedLeftModelImportRoute
End Function
Public Function GetRelatedRightModelListFromRelatedModelWithParent(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim RightModelID: RightModelID = rs.fields("RightModelID"): If ExitIfTrue(isFalse(RightModelID), "RightModelID is empty..") Then Exit Function
    Dim RightModelUniqueField: RightModelUniqueField = ELookup("tblSeqModelFields", "SeqModelID = " & RightModelID & " AND Unique", "FieldName", "FieldOrder")
    If isFalse(RightModelUniqueField) Then RightModelUniqueField = ELookup("tblSeqModelFields", "SeqModelID = " & RightModelID & " AND PrimaryKey", "FieldName", "FieldOrder")
    
    GetRelatedRightModelListFromRelatedModelWithParent = GetReplacedTemplate(rs, "GetRelatedRightModelListFromRelatedModelWithParent")
    GetRelatedRightModelListFromRelatedModelWithParent = replace(GetRelatedRightModelListFromRelatedModelWithParent, "[RightModelUniqueField]", RightModelUniqueField)
    GetRelatedRightModelListFromRelatedModelWithParent = GetGeneratedByFunctionSnippet(GetRelatedRightModelListFromRelatedModelWithParent, "GetRelatedRightModelListFromRelatedModelWithParent", "GetRelatedRightModelListFromRelatedModelWithParent")
    CopyToClipboard GetRelatedRightModelListFromRelatedModelWithParent
End Function

Public Function GetRelatedLeftArrayValidation(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey"): If ExitIfTrue(isFalse(LeftForeignKey), "LeftForeignKey is empty..") Then Exit Function
    
    GetRelatedLeftArrayValidation = GetReplacedTemplate(rs, "GetRelatedLeftArrayValidation")
    GetRelatedLeftArrayValidation = replace(GetRelatedLeftArrayValidation, "[GetAllArrayFieldValidationBySeqModel]", GetAllArrayFieldValidationBySeqModel(frm, LeftModelID, LeftForeignKey))
    GetRelatedLeftArrayValidation = GetGeneratedByFunctionSnippet(GetRelatedLeftArrayValidation, "GetRelatedLeftArrayValidation", "GetRelatedLeftArrayValidation")
    CopyToClipboard GetRelatedLeftArrayValidation
End Function

Public Function GetRelatedModelEmptyArraySimpleOnly(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedModelEmptyArraySimpleOnly = GetReplacedTemplate(rs, "GetRelatedModelEmptyArraySimpleOnly")
    GetRelatedModelEmptyArraySimpleOnly = GetGeneratedByFunctionSnippet(GetRelatedModelEmptyArraySimpleOnly, "GetRelatedModelEmptyArraySimpleOnly", "GetRelatedModelEmptyArraySimpleOnly", , True)
    CopyToClipboard GetRelatedModelEmptyArraySimpleOnly
End Function

Public Function GetSimpleJoinFromRelationship(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSimpleJoinFromRelationship = GetReplacedTemplate(rs, "GetSimpleJoinFromRelationship")
    GetSimpleJoinFromRelationship = GetGeneratedByFunctionSnippet(GetSimpleJoinFromRelationship, "GetSimpleJoinFromRelationship", "GetSimpleJoinFromRelationship")
    CopyToClipboard GetSimpleJoinFromRelationship
    
End Function

Public Function GetRequiredListForTableForm(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRequiredListForTableForm = GetReplacedTemplate(rs, "GetRequiredListForTableForm")
    GetRequiredListForTableForm = GetGeneratedByFunctionSnippet(GetRequiredListForTableForm, "GetRequiredListForTableForm", "GetRequiredListForTableForm", , True)
    CopyToClipboard GetRequiredListForTableForm
    
End Function

Public Function GenerateModelJoinFromChildSQL(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GenerateModelJoinFromChildSQL = GetReplacedTemplate(rs, "GenerateModelJoin From Child SQL")
    GenerateModelJoinFromChildSQL = GetGeneratedByFunctionSnippet(GenerateModelJoinFromChildSQL, "GenerateModelJoinFromChildSQL", "GenerateModelJoin From Child SQL")
    CopyToClipboard GenerateModelJoinFromChildSQL
    
End Function

Public Function GetRelatedDropzoneModel(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetRelatedDropzoneModel = GetReplacedTemplate(rs, "GetRelatedDropzoneModel")
    GetRelatedDropzoneModel = GetGeneratedByFunctionSnippet(GetRelatedDropzoneModel, "GetRelatedDropzoneModel", "GetRelatedDropzoneModel", , True)
    CopyToClipboard GetRelatedDropzoneModel
End Function

Public Function GetRelatedDropzoneModelUpdateOrInsert(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim ExcludeInForm: ExcludeInForm = rs.fields("ExcludeInForm")
    
    Dim GetCreatedModelObject: GetCreatedModelObject = IIf(ExcludeInForm, GetReplacedTemplate(rs, "GetCreatedModelObject"), "")
    
    GetRelatedDropzoneModelUpdateOrInsert = GetReplacedTemplate(rs, "GetRelatedDropzoneModelUpdateOrInsert")
    GetRelatedDropzoneModelUpdateOrInsert = replace(GetRelatedDropzoneModelUpdateOrInsert, "[GetCreatedModelObject]", GetCreatedModelObject)
    GetRelatedDropzoneModelUpdateOrInsert = GetGeneratedByFunctionSnippet(GetRelatedDropzoneModelUpdateOrInsert, "GetRelatedDropzoneModelUpdateOrInsert", "GetRelatedDropzoneModelUpdateOrInsert")
    CopyToClipboard GetRelatedDropzoneModelUpdateOrInsert
    
End Function

Public Function WriteToLeftmodeldropzone_tsx(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim IncludeAsLocalDropzone: IncludeAsLocalDropzone = rs.fields("IncludeAsLocalDropzone")
    ''IncludeAsDropzone -- IncludeAsLocalDropzone
    Dim vLocal: vLocal = IIf(IncludeAsLocalDropzone, "Local", "")
    
    WriteToLeftmodeldropzone_tsx = GetReplacedTemplate(rs, "LeftModelDropzone.tsx")
    WriteToLeftmodeldropzone_tsx = replace(WriteToLeftmodeldropzone_tsx, "[Local]", vLocal)
    WriteToLeftmodeldropzone_tsx = GetGeneratedByFunctionSnippet(WriteToLeftmodeldropzone_tsx, "WriteToLeftmodeldropzone_tsx", "LeftModelDropzone.tsx")
    CopyToClipboard WriteToLeftmodeldropzone_tsx
    
    Dim RightModelPath: RightModelPath = rs.fields("RightModelPath"): If ExitIfTrue(isFalse(RightModelPath), "RightModelPath is empty..") Then Exit Function
    Dim RightModelName: RightModelName = rs.fields("RightModelName"): If ExitIfTrue(isFalse(RightModelName), "RightModelName is empty..") Then Exit Function
    Dim ClientPath: ClientPath = rs.fields("ClientPath"): If ExitIfTrue(isFalse(ClientPath), "ClientPath is empty..") Then Exit Function
    Dim RightModelID: RightModelID = rs.fields("RightModelID"): If ExitIfTrue(isFalse(RightModelID), "RightModelID is empty..") Then Exit Function
    
    ''C:\Users\User\Desktop\Web Development\task-manager-next-13\src\components\tasks\TaskNoteDropzone.tsx
    Dim filePath: filePath = ClientPath & "src\components\" & RightModelPath & "\" & RightModelName & "Dropzone.tsx"
    WriteToFile filePath, WriteToLeftmodeldropzone_tsx, RightModelID
    
End Function

Public Function GetLeftModelDropzoneImport(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetLeftModelDropzoneImport = GetReplacedTemplate(rs, "GetLeftModelDropzoneImport")
    GetLeftModelDropzoneImport = GetGeneratedByFunctionSnippet(GetLeftModelDropzoneImport, "GetLeftModelDropzoneImport", "GetLeftModelDropzoneImport")
    CopyToClipboard GetLeftModelDropzoneImport
    
End Function
Public Function GetModelFilesInitial(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetModelFilesInitial = GetReplacedTemplate(rs, "GetModelFilesInitial")
    GetModelFilesInitial = GetGeneratedByFunctionSnippet(GetModelFilesInitial, "GetModelFilesInitial", "GetModelFilesInitial", , True)
    CopyToClipboard GetModelFilesInitial
End Function
Public Function GetModelFilesInitialModification(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetModelFilesInitialModification = GetReplacedTemplate(rs, "GetModelFilesInitialModification")
    GetModelFilesInitialModification = GetGeneratedByFunctionSnippet(GetModelFilesInitialModification, "GetModelFilesInitialModification", "GetModelFilesInitialModification")
    CopyToClipboard GetModelFilesInitialModification
End Function
Public Function GetModelDropzoneComponent(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetModelDropzoneComponent = GetReplacedTemplate(rs, "GetModelDropzoneComponent")
    GetModelDropzoneComponent = GetGeneratedByFunctionSnippet(GetModelDropzoneComponent, "GetModelDropzoneComponent", "GetModelDropzoneComponent", True)
    CopyToClipboard GetModelDropzoneComponent
End Function
Public Function GetLeftModelToReduce(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetLeftModelToReduce = GetReplacedTemplate(rs, "GetLeftModelToReduce")
    GetLeftModelToReduce = GetGeneratedByFunctionSnippet(GetLeftModelToReduce, "GetLeftModelToReduce", "GetLeftModelToReduce", , True)
    CopyToClipboard GetLeftModelToReduce
End Function
Public Function GetRightModelPushPlaceholder(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey"): If ExitIfTrue(isFalse(LeftForeignKey), "LeftForeignKey is empty..") Then Exit Function
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    Dim LeftFieldName: LeftFieldName = ELookup("tblSeqModelFields", "SeqModelID = " & LeftModelID & " AND DatabaseFieldName = " & Esc(LeftForeignKey), "FieldName")
    
    GetRightModelPushPlaceholder = GetReplacedTemplate(rs, "GetRightModelPushPlaceholder")
    GetRightModelPushPlaceholder = replace(GetRightModelPushPlaceholder, "[LeftFieldName]", LeftFieldName)
    GetRightModelPushPlaceholder = GetGeneratedByFunctionSnippet(GetRightModelPushPlaceholder, "GetRightModelPushPlaceholder", "GetRightModelPushPlaceholder")
    CopyToClipboard GetRightModelPushPlaceholder
End Function

Public Function GetSeqModelRelationshipKeys(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetSeqModelRelationshipKeys = "{" & vbNewLine & GetKVPairs("qrySeqModelRelationships", rs) & vbNewLine & "},"
    
End Function
Public Function GetPostgreSQLCreateTableRelationship(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey"): If ExitIfTrue(isFalse(LeftForeignKey), "LeftForeignKey is empty..") Then Exit Function
    
    GetPostgreSQLCreateTableRelationship = GetReplacedTemplate(rs, "GetPostgreSQLCreateTableRelationship")
    ''Lookup if the leftField from the seqmodel allowed null
    Dim AllowNull: AllowNull = isPresent("qrySeqModelFields", "SeqModelID = " & LeftModelID & " AND DatabaseFieldName = " & Esc(LeftForeignKey) & " AND AllowNull")
    Dim CascadeOrSetNull: CascadeOrSetNull = "CASCADE" ''SETNULL
    If AllowNull Then CascadeOrSetNull = "SET NULL" ''SETNULL
    GetPostgreSQLCreateTableRelationship = replace(GetPostgreSQLCreateTableRelationship, "[CascadeOrSetNull]", CascadeOrSetNull)
    ''GetPostgreSQLCreateTableRelationship = GetGeneratedByFunctionSnippet(GetPostgreSQLCreateTableRelationship, "GetPostgreSQLCreateTableRelationship", "GetPostgreSQLCreateTableRelationship")
    CopyToClipboard GetPostgreSQLCreateTableRelationship
    
End Function

Public Function GetCreateIndexFromRelationship(frm As Object, Optional SeqModelRelationshipID = "")

    RunCommandSaveRecord

    If isFalse(SeqModelRelationshipID) Then
        SeqModelRelationshipID = frm("SeqModelRelationshipID")
        If ExitIfTrue(isFalse(SeqModelRelationshipID), "SeqModelRelationshipID is empty..") Then Exit Function
    End If

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)

    GetCreateIndexFromRelationship = GetReplacedTemplate(rs, "Create index from relationship")
    ''GetCreateIndexFromRelationship = GetGeneratedByFunctionSnippet(GetCreateIndexFromRelationship, "GetCreateIndexFromRelationship", "Create index from relationship")
    CopyToClipboard GetCreateIndexFromRelationship
    
End Function

''Command Name: Get Postgre SQL Related Join
Public Function GetPostgreSQLRelatedJoin(SeqModelRelationshipID, Alias)

    Dim lines As New clsArray
    Dim sqlStr: sqlStr = "SELECT * FROM qrySeqModelRelationships WHERE SeqModelRelationshipID = " & SeqModelRelationshipID
    Dim rs As Recordset: Set rs = ReturnRecordset(sqlStr)
    
    Dim LeftModelID: LeftModelID = rs.fields("LeftModelID"): If ExitIfTrue(isFalse(LeftModelID), "LeftModelID is empty..") Then Exit Function
    Dim LeftForeignKey: LeftForeignKey = rs.fields("LeftForeignKey"): If ExitIfTrue(isFalse(LeftForeignKey), "LeftForeignKey is empty..") Then Exit Function
    
    Dim IsNullAllowed: IsNullAllowed = isPresent("tblSeqModelFields", "DatabaseFieldName = " & Esc(LeftForeignKey) & " AND SeqModelID = " & LeftModelID & " AND AllowNull")
    
    Dim JoinType: JoinType = IIf(IsNullAllowed, "LEFT JOIN", "JOIN")
    
    GetPostgreSQLRelatedJoin = GetReplacedTemplate(rs, "GetPostgreSQLRelatedJoin")
    GetPostgreSQLRelatedJoin = replace(GetPostgreSQLRelatedJoin, "[JoinType]", JoinType)
    GetPostgreSQLRelatedJoin = replace(GetPostgreSQLRelatedJoin, "[Alias]", Alias)
    ''GetPostgreSQLRelatedJoin = GetGeneratedByFunctionSnippet(GetPostgreSQLRelatedJoin, "GetPostgreSQLRelatedJoin", "GetPostgreSQLRelatedJoin")
    ''CopyToClipboard GetPostgreSQLRelatedJoin
    
End Function
